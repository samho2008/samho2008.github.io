(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{2169:function(t,e,v){"use strict";v.r(e);var r=v(34),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"实体类定义规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实体类定义规范"}},[t._v("#")]),t._v(" 实体类定义规范")]),t._v(" "),v("h2",{attrs:{id:"大小写问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#大小写问题"}},[t._v("#")]),t._v(" 大小写问题")]),t._v(" "),v("p",[t._v("根据阿里巴巴 Java 开发手册（黄山版）编程规约中命名风格的第 4 条，DO / PO / DTO / BO / VO / UID 作为类名结尾时应使用全大写，因为这些单词是缩写，作为缩写时每个首字母应大写。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("4.【强制】类名使用 UpperCamelCase 风格，以下情形例外：DO / PO / DTO / BO / VO / UID 等。\n正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion\n反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion\n")])])]),v("h2",{attrs:{id:"包层级划分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#包层级划分"}},[t._v("#")]),t._v(" 包层级划分")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("定义")]),t._v(" "),v("th",[t._v("层级")]),t._v(" "),v("th",[t._v("包名")]),t._v(" "),v("th",[t._v("命名规范")]),t._v(" "),v("th",[t._v("命名规范示例")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("DTO (Data Transfer Object)")]),t._v(" "),v("td",[t._v("传输层（接收前端传过来的参数）")]),t._v(" "),v("td",[t._v("model/dto")]),t._v(" "),v("td",[t._v("XxxDTO")]),t._v(" "),v("td",[t._v("UserDTO")])]),t._v(" "),v("tr",[v("td",[t._v("VO (View Object)")]),t._v(" "),v("td",[t._v("视图层（从 Controller 层对外传给前端的数据）")]),t._v(" "),v("td",[t._v("model/vo")]),t._v(" "),v("td",[t._v("XxxVO")]),t._v(" "),v("td",[t._v("UserVO")])]),t._v(" "),v("tr",[v("td",[t._v("PO (Persistent Object)")]),t._v(" "),v("td",[t._v("持久化对象，和数据库中的表名保持一致")]),t._v(" "),v("td",[t._v("model/po")]),t._v(" "),v("td",[t._v("User")]),t._v(" "),v("td",[t._v("User")])]),t._v(" "),v("tr",[v("td",[t._v("Request")]),t._v(" "),v("td",[t._v("第三方接口封装请求参数")]),t._v(" "),v("td",[t._v("model/bo")]),t._v(" "),v("td",[t._v("XxxRequest")]),t._v(" "),v("td",[t._v("WxLoginRequest")])]),t._v(" "),v("tr",[v("td",[t._v("Response")]),t._v(" "),v("td",[t._v("第三方接口响应结果封装")]),t._v(" "),v("td",[t._v("model/bo")]),t._v(" "),v("td",[t._v("XxxResponse")]),t._v(" "),v("td",[t._v("WxLoginResponse")])])])]),t._v(" "),v("blockquote",[v("p",[t._v("使用 "),v("code",[t._v("org.springframework.beans.BeanUtils.copyProperties(复制源, 目标类)")]),t._v("，可以进行模型层之间的转换，注意字段名和数据类型要保持一致，否则无法完成复制，注意使用 Spring 的 BeanUtils，而不要使用 Apache 的 BeanUtils，Apache 的 BeanUtils 效率非常低下！")])]),t._v(" "),v("blockquote",[v("p",[t._v("有的开发者把 Controller 层接收的数据用 VO，有的人用 DTO，为什么会出现这种混乱呢？因为在设计上来说，每个层应该有自己的模型，不应该和其他层级进行耦合，所以在 Controller 层，用 VO 先接收，然后进行数据的处理之后，重新封装为 DTO，再交给 service 层处理，但是现在绝大部分的业务场景，controller 层都是只负责数据的输入与输出，以及参数校验，不应该参与逻辑处理而是交给 service 层来处理，所以 vo 层就砍掉了，直接在 controller 层用 DTO 来接收，然后把 DTO 直接传给 service 层。")])]),t._v(" "),v("blockquote",[v("p",[t._v("参考文献：")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/alibaba/p3c",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里巴巴 p3c 开发规范"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.bilibili.com/video/BV1zR4y1H7vk",target:"_blank",rel:"noopener noreferrer"}},[t._v("po、dto、vo 都是啥，分这么多层有必要吗？mapstruct 对象转换工具5分钟学会，告别beanutils"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=_.exports}}]);